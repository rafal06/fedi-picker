import {createContext} from "preact";
import {useMemo, useState} from "preact/hooks";

export interface Settings {
    postUrl: string,
    winnerCount: number,
    mustFollow: Array<string>,
    interactionFilter: {
        boosted: boolean,
        replied: boolean,
    },
}

const defaultValue: Settings = {
    postUrl: '',
    winnerCount: 1,
    mustFollow: [],
    interactionFilter: {
        boosted: true,
        replied: false,
    },
}

export const SettingsContext = createContext<{
    // Type generated by IDE from useMemo call, just so that TypeScript will actually be useful
    setSettings: (value: (((prevState: Settings) => Settings) | Settings)) => void;
    settings: Settings;
}>({
    settings: defaultValue,
    setSettings: () => {},
});

export default function SettingsProvider(props: any) {
    const [settings, setSettings] = useState(defaultValue);
    const settingsMemo = useMemo(() => {
        return { settings, setSettings }
    }, [settings])

    return (
        <SettingsContext.Provider value={settingsMemo}>
            {props.children}
        </SettingsContext.Provider>
    )
}
